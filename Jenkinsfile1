pipeline {

    agent { label 'docker-slave-ssh' }
    stages {
        stage('Clone') {
              steps {
                git branch: 'main',
                    url: 'https://github.com/OnStas/jenkins_test.git'
                script {    
                def gitCommitSHA = sh(returnStdout: true, script: 'git rev-parse  HEAD').trim()
                def allPRs = sh(returnStdout: true, script: "origin ‘pull/*/head’")
                List result = allPRs.split( '\n' ).findAll { it.contains(gitCommitSHA) && it.contains("refs/pull") }
                if (result.size() ==1 ){
                 def str = result[0]
                def prId = str.substring(str.indexOf("pull")+5,str.lastIndexOf("head")-1)
                echo "Pull request id: ${prId}"
                }}
                
                sh 'printenv'
                sh 'git fetch origin refs/pull-requests/*:refs/pull-requests/*'
                sh 'git name-rev --name-only --refs="refs/pull-requests/*/from" HEAD'
            }          
        }
        stage('Build') {
            steps {
                sh 'chmod +x build.sh'
                sh './build.sh 2>&1 | tee artifact.txt'
            }
        }
        stage('Test') {
            steps {
                sh 'chmod +x test.sh'
                sh './test.sh 2>&1 | tee test_result.txt' 
            }
        }                      
    }
    post {
        always {
            archiveArtifacts(artifacts: '**/artifact.txt', followSymlinks: false)
        }
        failure {
            archiveArtifacts(artifacts: '**/test_result.txt', followSymlinks: false)
        }
    }
}
